// The JSON comments are somewhat brittle. Don't try anything too fancy.
{
	// Default HTTP(S) address:port to listen on for websocket and long polling clients. Either a
	// numeric or a canonical name, e.g. ":80" or ":https". Could include a host name, e.g.
	// "localhost:80".
	// Could be blank: if TLS is not configured, will use ":80", otherwise ":443".
	// Can be overridden from the command line, see option --listen.
	"listen": ":6060",

	// URL path for mounting the directory with static files.
	"static_mount": "/",

	// Address:port to listen for gRPC clients. Leave blank to disable gRPC support.
	// Could be overridden from the command line with --grpc_listen.
	"grpc_listen": ":6061",

	// Salt for signing API key. 32 random bytes base64-encoded. Use 'keygen' to generate
	// the API key and the salt.
	"api_key_salt": "T713/rYYgW7g4m3vG6zGRh7+FM1t0T8j13koXScOAj4=",

	// Maximum message size allowed from client in bytes (262144 = 256KB).
	// Intended to prevent malicious clients from sending very large messages inband (does 
	// not affect out-of-band large files). 
	"max_message_size": 262144,

	// Maximum number of subscribers per group topic.
	"max_subscriber_count": 128,
	
	// Maximum number of indexable tags per topic or user.
	"max_tag_count": 16,

	// Large media/blob handlers.
	"media": {
		// Media handler to use
		"use_handler": "fs",
		// Maximum size of uploaded file (8MB here for testing, maybe increase to 100MB = 104857600 in prod)
		"max_size": 8388608,
		// Garbage collection periodicity in seconds
		"gc_period": 60,
		// Number of unused entries to delete in one pass
		"gc_block_size": 100,
		// Configurations for various handlers.
		"handlers": {
			// File system storage.
			"fs": {
				// File system location to store uploaded files. In case of a cluster it
				// must be accessible by all cluster members, i.e. a network drive.
				"upload_to": "uploads"
			}
		}
	},

	// TLS (httpS) configuration.
	"tls": {
		// Enable TLS.
		"enabled": false,

		// Listen for connections on this port and redirect them to HTTPS port.
		"http_redirect": ":80",

		// Add Strict-Transport-Security to headers, the value signifies age.
		// Zero or negative value turns it off.
		"strict_max_age": 604800,

		// Letsencrypt configuration
		"autocert": {
			// Location of certificates.
			"cache": "/etc/letsencrypt/live/your.domain.here",

			// Contact address for this installation. Replace with your own address
			// or remove this line.
			"email": "noreply@example.com",

			// Domains served. Replace with your own domain name.
			"domains": ["whatever.example.com"]
		}
	},

	// Authentication configuration.
	"auth_config": {
		// Basic (login + password) authentication.
		"basic": {
			// Add 'basic:username' to tags making user discoverable by login.
			"add_to_tags": true
		},

		// Token authentication
		"token": {
			// Lifetime of a security token in seconds. 1209600 = 2 weeks.
			"expire_in": 1209600,

			// Serial number of the token. Can be used to invalidate all issued tokens at once.
			"serial_num": 1,

			// Secret key (HMAC salt) for signing the tokens. Generate your own then keep it secret.
			// 32 random bytes base64 encioded.
			"key": "wfaY2RgF2S1OQI/ZlK+LSrp1KB2jwAdGAIHQ7JZn+Kc="
		}
	},

	// Database configuration
	"store_config": {
		// XTEA encryption key for user IDs and topic names. 16 random bytes base64-encoded.
		// Generate your own and keep it secret.
		"uid_key": "la6YsO+bNX/+XIkOqc5Svw==",

		// Configurations of individual adapters.
		"adapters": {
			// MySQL configuration.
			"mysql": {
				// DSN, passed unchanged to MySQL driver. The 'parseTime=true' is required.
				"dsn": "root@tcp(localhost)/nanfengpo?parseTime=true",
				// Name of the main database.
				"database": "nanfengpo"
			},

			// RethinkDB configuration. See https://godoc.org/github.com/GoRethink/gorethink#ConnectOpts
			// for other possible options.
			"rethinkdb": {
				// Address(es) of RethinkDB node(s): either a string or an array of strings.
				"addresses": "localhost:28015"	,
				// Name of the main database.
				"database": "nanfengpo"
			}
		}
	},

	// Account validators (email or SMS or captcha)
	"acc_validation": {

		// Email validator config.
		"email": {
			// Restrict use of "email" namespace.
			"add_to_tags": true,

			// List of authentication levels which require this validation method.
			"required": ["auth"],

			// Configuration passed to the validator unchanged.
			"config": {
				// Address of the SMPT server to use.
				"smtp_server": "smtp.example.com",

				// SMTP port to use. "25" for basic email RFC 5321 (2821, 821), "587" for RFC 3207 (TLS).
				"smtp_port": "25",

				// Address to use for authentication and to show in From:
				"sender": "noreply@example.com",

				// Password of the sender.
				"sender_password": "your-password-here",

				// Message body template. Uses http/template syntax.
				"msg_body_templ": "./templ/email-validation-body.templ",

				// Message subject line
				"msg_subject": "nanfengpo chat: confirm email",

				// Additional message headers (currently unused).
				"headers": [],

				// Allow this many confirmation attempts before blocking the credential.
				"max_retries": 4,

				// Dummy response to accept. Remove the line in production.
				"debug_response": "123456"
			}
		},

		// Dummy placeholder validator for SMS and voice validation.
		"tel": {
			"add_to_tags": true,
			"config": {
				"template": "./templ/sms-validation.templ",
				"max_retries": 4,
				"debug_response": "123456"
			}
		}
	},

	// Configuration of push notifications.
	"push": [
		{
			// Notificator which writes to STDOUT. Useful for debugging.
			"name":"stdout",
			"config": {
				// Disabled.
				"enabled": false
			}
		},
		{
			// Google FCM notificator.
			"name":"fcm",
			"config": {
				// Disabled. Won't work without the server key anyway. See below.
				"enabled": false,

				// Number of pending notifications to keep.
				"buffer": 1024,

				// Server key or Server legacy key. Get your own at 
				// https://console.firebase.google.com/u/0/project/**NAME-OF-YOUR-PROJECT**/settings/cloudmessaging/
				"api_key": "*** FCM server key. Get your own. ***",

				// Time in seconds before notification is discarded if undelivered (by Google).
				"time_to_live": 3600,

				// Can be used to collapse multiple notifications on the client side. See FCM docs.
				"collapse_key": "",

				// Android resource ID to use as a notification icon.
				"icon": "ic_logo_push",

				// Notification color (Android).
				"icon_color": "#3949AB"
			}
		}
	],

	// Cluster-mode configuration.
	"cluster_config": {
		// Name of this node. Can be assigned from the command line.
		// Empty string disables clustering.
		"self": "",

		// List of available nodes.
		"nodes": [
			// Name and TCP address of every node in the cluster.
			{"name": "one", "addr":"localhost:12001"}, 
			{"name": "two", "addr":"localhost:12002"}, 
			{"name": "three", "addr":"localhost:12003"}
		],

		// Failover config.
		"failover": {
			// Failover is enabled.
			"enabled": true,
			// Time in milliseconds between heartbeats.
			"heartbeat": 100,
			// Initiate leader election when the leader is not available for this many heartbeats.
			"vote_after": 8,
			// Consider node failed when it missed this many heartbeats.
			"node_fail_after": 16
		}
	},

	// Configuration of plugins
	"plugins": [
		{
			// Enable or disable this plugin.
			"enabled": false,

			// Name of the plugin, must be unique.
			"name": "python_chat_bot",

			// Timeout in microseconds.
			"timeout": 20000,

			// Events to send to the plugin.
			"filters": {
				// Account creation events.
				"account": "C"
			},

			// Error code to use in case flugin has failed.
			"failure_code": 0,

			// Text of an error message to report in case of plugin falure.
			"failure_text": null,

			// Address of the plugin.
			"service_addr": "tcp://localhost:40051"
		}
	]
}
